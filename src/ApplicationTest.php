<?php

namespace Source;

require_once '../vendor/autoload.php';

class ApplicationTest extends \PHPUnit\Framework\TestCase {

    /**
     * @var Application
     */
    private $_application;

    protected function setUp() {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->_application = new Application();
    }

    /**
     * @dataProvider runDataProvider
     * @param $dataSet
     * @param $limit
     * @param $offset
     * @param $result
     */
    public function testRun($dataSet, $limit, $offset, $result) {
        $this->assertEquals($result, $this->_application->run($dataSet, $offset, $limit));
    }

    /**
     * @return array
     */
    public function runDataProvider() {
        //       dataSet                                limit  offset    result
        return [
            [
                $this->_testArrays([120,140,120,60]),   100,   0,        [0 => ['limit' => 100, 'offset' => 0]],
            ],
            [
                $this->_testArrays([120,140,120,60]),   100,   100,      [0 => ['limit' => 20, 'offset' => 100], 1 => ['limit' => 80, 'offset' => 0]],
            ],
            [
                $this->_testArrays([120,140,120,60]),   100,   200,      [1 => ['limit' => 60, 'offset' => 80],  2 => ['limit' => 40, 'offset' => 0]],
            ],
            [
                $this->_testArrays([120,140,120,60]),   100,   300,      [2 => ['limit' => 80, 'offset' => 40],  3 => ['limit' => 20, 'offset' => 0]]
            ],
            [
                $this->_testArrays([120,140,120,60]),   100,   400,      [3 => ['limit' => 40, 'offset' => 20]]
            ],
            [
                $this->_testArrays([120,140,120,60]),   100,   1200,     []
            ],
        ];
    }

    private function _testArrays(array $counts) {
        $result = [];
        foreach ($counts as $count) {
            $array = [];
            $result[] = array_pad($array, $count, 0);
        }
        return $result;
    }
}